<?php

/**
 * @file
 * Provides full-site preview functionality for content staging.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\workspace\EntityAccess;
use Drupal\workspace\Plugin\Field\WorkspaceFieldItemList;
use Drupal\workspace\WorkspaceManager;

/**
 * Implements hook_help().
 */
function workspace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workspace module.
    case 'help.page.workspace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Workspace module allows workspaces to be defined and switched between. Content is then assigned to the active workspace when created. For more information, see the <a href=":workspace">online documentation for the Workspace module</a>.', [':workspace' => 'https://www.drupal.org/node/2824024']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function workspace_entity_base_field_info(EntityTypeInterface $entity_type) {
  if (\Drupal::service('workspace.manager')->entityTypeCanBelongToWorkspaces($entity_type)) {
    return [
      'workspace' => BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Workspace'))
        ->setDescription(t('The Workspace of this piece of content.'))
        ->setComputed(TRUE)
        ->setClass(WorkspaceFieldItemList::class)
        ->setSetting('target_type', 'workspace')
        ->setTranslatable(TRUE),
    ];
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function workspace_query_entity_query_alter(AlterableInterface $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  // Don't alter any entity queries if the active workspace is the default
  // workspace (ie. live).
  if ($active_workspace == WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Only alter if the entity type can belong to a workspace, being revisionable
  // and publishable.
  $entity_type = \Drupal::entityTypeManager()->getDefinition($query->getMetaData('entity_type'));
  if (!empty($entity_type) && $workspace_manager->entityTypeCanBelongToWorkspaces($entity_type)) {
    $entity_type_id = $entity_type->id();
    $entity_type_id_key = $entity_type->getKey('id');
    // Join the Content Workspace entity's field revision table.
    $query->leftJoin('content_workspace_field_revision', 'cwfr', 'base_table.' . $entity_type_id_key . ' = cwfr.content_entity_id');
    $query->condition('cwfr.content_entity_type_id', $entity_type_id);
    // Return entities in the active workspace, the default workspace, or if the
    // workspace value is set to NULL.
    $group = $query->orConditionGroup()
      ->condition('cwfr.workspace', [$active_workspace, WorkspaceManager::DEFAULT_WORKSPACE], 'IN')
      ->condition('cwfr.workspace', NULL, 'IS');
    $query->condition($group);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function workspace_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  // Don't alter any views if the active workspace is the default workspace
  // (ie. live).
  if ($active_workspace == WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Don't alter any views if the entity type can't belong to a workspace,
  // being revisionable and publishable.
  $entity_type = $view->getBaseEntityType();
  if (empty($entity_type) || !$workspace_manager->entityTypeCanBelongToWorkspaces($entity_type)) {
    return;
  }

  // Join the view to the Content Workspace entity's field revision table.
  $configuration = [
    'table' => 'content_workspace_field_revision',
    'field' => 'content_entity_id',
    'left_table' => $entity_type->getDataTable(),
    'left_field' => $entity_type->getKey('id'),
    'operator' => '=',
  ];
  /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $join */
  $join = Views::pluginManager('join')
    ->createInstance('standard', $configuration);
  /** @var \Drupal\views\Plugin\views\query\Sql $query */
  $query->addRelationship('cwrf', $join, 'content_workspace_field_revision');
  // Return entities in the active workspace, the default workspace, or if the
  // workspace value is set to NULL.
  $query->setWhereGroup('OR', 'workspace');
  $query->addWhere('workspace', 'cwrf.workspace', [$active_workspace, WorkspaceManager::DEFAULT_WORKSPACE], 'IN');
  $query->addWhere('workspace', 'cwrf.workspace', NULL, 'IS');
  // If there is already a condition for publishing status, replace it with an
  // 'OR' condition, based on the publishing status in the workspace and the
  // general publishing status of the entity.
  foreach ($query->where as $where_id => $where) {
    foreach ($where['conditions'] as $condition_id => $condition) {
      if ($condition['field'] == $entity_type->getDataTable() . '.' . $entity_type->getKey('published')) {
        $value = $query->where[$where_id]['conditions'][$condition_id]['value'];
        $query->setWhereGroup('OR', 'published');
        $query->addWhere('published', 'cwrf.published', $value);
        $query->addWhere('published', $entity_type->getDataTable() . '.' . $entity_type->getKey('published'), $value);
        unset($query->where[$where_id]['conditions'][$condition_id]);
      }
    }
  }

  // Add a group_by option for all displays so only one result is returned per
  // entity.
  foreach ($view->displayHandlers->getInstanceIds() as $display_id) {
    $view->displayHandlers->get($display_id)->setOption('group_by', TRUE);
  }
}

/**
 * Implements hook_entity_load().
 */
function workspace_entity_load(array &$entities, $entity_type_id) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  // Don't alter the loaded entity if the entity type can't belong to a
  // workspace.
  if (!$workspace_manager->entityTypeCanBelongToWorkspaces(\Drupal::entityTypeManager()->getDefinition($entity_type_id))) {
    return;
  }

  // Don't alter the loaded entity if the active workspace is the default
  // workspace.
  $active_workspace = $workspace_manager->getActiveWorkspace();
  if ($active_workspace == WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Find the latest content workspace entity for an entity within the active or
  // default workspaces.
  $keys = array_keys($entities);
  $results = \Drupal::entityTypeManager()
    ->getStorage('content_workspace')
    ->getQuery()
    ->allRevisions()
    ->condition('content_entity_type_id', $entity_type_id)
    ->condition('content_entity_id', $keys, 'IN')
    ->condition('workspace', [$active_workspace, WorkspaceManager::DEFAULT_WORKSPACE], 'IN')
    ->sort('revision_id', 'DESC')
    ->range(0, 1)
    ->execute();
  foreach ($results as $revision_id => $entity_id) {
    /** @var \Drupal\workspace\Entity\ContentWorkspaceInterface $content_workspace */
    $content_workspace = \Drupal::entityTypeManager()
      ->getStorage('content_workspace')
      ->loadRevision($revision_id);
    $entity = $entities[$content_workspace->get('content_entity_id')->value];
    // If the latest revision is not the same as the loaded entity, replace it
    // with the latest revision.
    if ($content_workspace->get('content_entity_revision_id')->value != $entity->getRevisionId()) {
      $new_entity = \Drupal::entityTypeManager()
        ->getStorage($entity_type_id)
        ->loadRevision($content_workspace->get('content_entity_revision_id')->value);
      $entities[$entity->id()] = $new_entity;
    }
    // Update the entity's publishing status based on the publishing status
    // within the workspace.
    $content_workspace->isPublished() ? $entities[$entity->id()]->setPublished() : $entities[$entity->id()]->setUnpublished();
  }
}

/**
 * Implements hook_entity_presave().
 */
function workspace_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\EntityPublishedInterface $entity */
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');

  // Only modify the entity if the active workspace isn't the default, and
  // and the entity can belong to a workspace.
  if (!empty($workspace_manager->getActiveWorkspace())
    && $workspace_manager->entityTypeCanBelongToWorkspaces($entity->getEntityType())) {

    // Force a new revision if the entity is not replicating.
    if (!$entity->isNew() && !isset($entity->_isReplicating)) {
      $entity->setNewRevision(TRUE);
    }

    // The publishing status is stored in a property to be used then creating
    // or updating the content_workspace entity.
    $entity->initial_published = $entity->isPublished();

    if (WorkspaceManager::DEFAULT_WORKSPACE != $workspace_manager->getActiveWorkspace()) {
      // As this is the non-default workspace only new entity revisions should
      // be made default.
      if (isset($entity->original)
          && ($entity->original->workspace->target_id == WorkspaceManager::DEFAULT_WORKSPACE
          || is_null($entity->original->workspace->target_id))) {
        $entity->isDefaultRevision(FALSE);
      }
      else {
        $entity->isDefaultRevision(TRUE);
      }

      // All entities in the non-default workspace get unpublished.
      $entity->setUnpublished();
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function workspace_entity_insert(EntityInterface $entity) {
  \Drupal::service('workspace.manager')->updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_entity_update().
 */
function workspace_entity_update(EntityInterface $entity) {
  \Drupal::service('workspace.manager')->updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_entity_access().
 *
 * @see \Drupal\workspace\EntityAccess
 */
function workspace_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityAccess::class)
    ->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_create_access().
 *
 * @see \Drupal\workspace\EntityAccess
 */
function workspace_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityAccess::class)
    ->entityCreateAccess($account, $context, $entity_bundle);
}
