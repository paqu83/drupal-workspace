<?php

/**
 * @file
 * Provides full-site preview functionality for content staging.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\workspace\EntityAccess;
use Drupal\workspace\WorkspaceManager;

/**
 * Implements hook_help().
 */
function workspace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workspace module.
    case 'help.page.workspace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Workspace module allows workspaces to be defined and switched between. Content is then assigned to the active workspace when created. For more information, see the <a href=":workspace">online documentation for the Workspace module</a>.', [':workspace' => 'https://www.drupal.org/node/2824024']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function workspace_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  // Don't alter any views if the active workspace is the default workspace
  // (ie. live).
  if ($active_workspace == WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Don't alter any views if the entity type can't belong to a workspace,
  // being revisionable and publishable.
  $entity_type = $view->getBaseEntityType();
  if (empty($entity_type) || !$workspace_manager->entityTypeCanBelongToWorkspaces($entity_type)) {
    return;
  }

  // Join the view to the Content Workspace entity's field revision table.
  $configuration = [
    'table' => 'content_workspace_revision',
    'field' => 'content_entity_id',
    'left_table' => $entity_type->getDataTable(),
    'left_field' => $entity_type->getKey('id'),
    'operator' => '=',
  ];
  /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $join */
  $join = Views::pluginManager('join')
    ->createInstance('standard', $configuration);
  /** @var \Drupal\views\Plugin\views\query\Sql $query */
  $query->addRelationship('cwr', $join, 'content_workspace_revision');
  // Return entities in the active workspace, the default workspace, or if the
  // workspace value is set to NULL.
  $query->setWhereGroup('OR', 'workspace');
  $query->addWhere('workspace', 'cwr.workspace', [$active_workspace, WorkspaceManager::DEFAULT_WORKSPACE], 'IN');
  $query->addWhere('workspace', 'cwr.workspace', NULL, 'IS');

  // Add a group_by option for all displays so only one result is returned per
  // entity.
  foreach ($view->displayHandlers->getInstanceIds() as $display_id) {
    $view->displayHandlers->get($display_id)->setOption('group_by', TRUE);
  }
}

/**
 * Implements hook_entity_load().
 */
function workspace_entity_load(array &$entities, $entity_type_id) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $entity_type_manager = \Drupal::entityTypeManager();

  // Don't alter the loaded entity if the entity type can't belong to a
  // workspace.
  if (!$workspace_manager->entityTypeCanBelongToWorkspaces($entity_type_manager->getDefinition($entity_type_id))) {
    return;
  }

  // Don't alter the loaded entity if the active workspace is the default
  // workspace.
  $active_workspace = $workspace_manager->getActiveWorkspace();
  if ($active_workspace == WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Find the latest content workspace entity for an entity within the active or
  // default workspaces.
  $keys = array_keys($entities);
  $results = $entity_type_manager
    ->getStorage('content_workspace')
    ->getQuery()
    ->allRevisions()
    ->condition('content_entity_type_id', $entity_type_id)
    ->condition('content_entity_id', $keys, 'IN')
    ->condition('workspace', [$active_workspace, WorkspaceManager::DEFAULT_WORKSPACE], 'IN')
    ->sort('revision_id', 'DESC')
    ->range(0, 1)
    ->execute();
  foreach ($results as $revision_id => $entity_id) {
    /** @var \Drupal\workspace\Entity\ContentWorkspaceInterface $content_workspace */
    $content_workspace = $entity_type_manager
      ->getStorage('content_workspace')
      ->loadRevision($revision_id);
    $entity = $entities[$content_workspace->get('content_entity_id')->value];
    // If the latest revision is not the same as the loaded entity, replace it
    // with the latest revision.
    if ($content_workspace->get('content_entity_revision_id')->value != $entity->getRevisionId()) {
      $new_entity = $entity_type_manager
        ->getStorage($entity_type_id)
        ->loadRevision($content_workspace->get('content_entity_revision_id')->value);
      $entities[$entity->id()] = $new_entity;
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function workspace_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\EntityPublishedInterface $entity */
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');

  // Only run if the entity type can belong to a workspace and we are in a
  // non-default workspace.
  if (!$workspace_manager->entityTypeCanBelongToWorkspaces($entity->getEntityType())
     || $workspace_manager->getActiveWorkspace() === WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Force a new revision if the entity is not replicating.
  if (!$entity->isNew() && !isset($entity->_isReplicating)) {
    $entity->setNewRevision(TRUE);

    // All entities in the non-default workspace are pending revisions,
    // regardless of their publishing status. This means that when creating
    // a published pending revision in a non-default workspace it will also be
    // a published pending revision in the default workspace, however, it will
    // become the default revision only when it is replicated to the default
    // workspace.
    $entity->isDefaultRevision(FALSE);
  }

  // When a new published entity is inserted in a non-default workspace, we
  // actually want two revisions to be saved:
  //  - An unpublished default revision in the default ('live') workspace.
  //  - A published pending revision in the current workspace.
  if ($entity->isNew() && $entity->isPublished()) {
    // Keep track of the publishing status for workspace_entity_insert() and
    // unpublish the default revision.
    $entity->_initialPublished = TRUE;
    $entity->setUnpublished();
  }
}

/**
 * Implements hook_entity_insert().
 */
function workspace_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\EntityPublishedInterface $entity */
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');

  // Only run if the entity type can belong to a workspace and we are in a
  // non-default workspace.
  if (!$workspace_manager->entityTypeCanBelongToWorkspaces($entity->getEntityType())
     || $workspace_manager->getActiveWorkspace() === WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  // Handle the case when a new published entity was created in a non-default
  // workspace and create a published pending revision for it.
  if (isset($entity->_initialPublished)) {
    // Operate on a clone to avoid changing the entity prior to subsequent
    // hook_entity_insert() implementations.
    $pending_revision = clone $entity;
    $pending_revision->setPublished();
    $pending_revision->isDefaultRevision(FALSE);
    $pending_revision->save();
  }
  else {
    $workspace_manager->updateOrCreateFromEntity($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function workspace_entity_update(EntityInterface $entity) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');

  // Only run if the entity type can belong to a workspace and we are in a
  // non-default workspace.
  if (!$workspace_manager->entityTypeCanBelongToWorkspaces($entity->getEntityType())
     || $workspace_manager->getActiveWorkspace() === WorkspaceManager::DEFAULT_WORKSPACE) {
    return;
  }

  $workspace_manager->updateOrCreateFromEntity($entity);
}

/**
 * Implements hook_entity_access().
 *
 * @see \Drupal\workspace\EntityAccess
 */
function workspace_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityAccess::class)
    ->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_create_access().
 *
 * @see \Drupal\workspace\EntityAccess
 */
function workspace_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityAccess::class)
    ->entityCreateAccess($account, $context, $entity_bundle);
}
