<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\workspace\Entity\WorkspaceInterface;
use Drupal\workspace\Plugin\Field\WorkspaceFieldItemList;

/**
 * Implements hook_help().
 */
function workspace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workspace module.
    case 'help.page.workspace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Workspace module allows workspaces to be defined and switched between. Content is then assigned to the active workspace when created. For more information, see the <a href=":workspace">online documentation for the Workspace module</a>.', [':workspace' => 'https://www.drupal.org/node/2824024']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function workspace_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->isRevisionable() && !in_array($entity_type->id(), ['content_workspace', 'workspace'])) {
    return ['workspace' => BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Workspace'))
      ->setDescription(t('The Workspace of this piece of content.'))
      ->setComputed(TRUE)
      ->setClass(WorkspaceFieldItemList::class)
      ->setSetting('target_type', 'workspace')
      ->setTranslatable(TRUE)];
  }
}

/**
 * Implements hook_query_alter().
 */
function workspace_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
  if ($active_workspace == $default_workspace_id) {
    return;
  }
  foreach ($workspace_manager->getSupportedEntityTypes() as $entity_type_id => $entity_type) {
    if ($workspace_manager->entityTypeCanBelongToWorkspaces($entity_type) && $query->hasTag($entity_type_id . '_load_multiple')) {
      $entity_type_id = $entity_type->id();
      $entity_type_id_key = $entity_type->getKey('id');
      $query->join('content_workspace_field_revision', 'cwfr', 'base.' . $entity_type_id_key . ' = cwfr.content_entity_id');
      $query->condition('cwfr.content_entity_type_id', $entity_type_id);
      $query->condition('cwfr.workspace', $active_workspace);
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function workspace_query_entity_query_alter(AlterableInterface $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
  if ($active_workspace == $default_workspace_id) {
    return;
  }

  $entity_type = \Drupal::entityTypeManager()->getDefinition($query->getMetaData('entity_type'));
  if (!empty($entity_type) && $workspace_manager->entityTypeCanBelongToWorkspaces($entity_type)) {
    $entity_type_id = $entity_type->id();
    $entity_type_id_key = $entity_type->getKey('id');
    $query->join('content_workspace_field_revision', 'cwfr', 'base_table.' . $entity_type_id_key . ' = cwfr.content_entity_id');
    $query->condition('cwfr.content_entity_type_id', $entity_type_id);
    $query->condition('cwfr.workspace', $active_workspace);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function workspace_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $active_workspace = $workspace_manager->getActiveWorkspace();
  $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
  if ($active_workspace != $default_workspace_id) {
    $configuration = array(
      'table' => 'content_workspace_field_revision',
      'field' => 'content_entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    );
    $join = \Drupal\views\Views::pluginManager('join')
      ->createInstance('standard', $configuration);
    $query->addRelationship('cwrf', $join);
    $query->addWhere($query->options['group'], 'cwrf.workspace', $active_workspace);
  }
}


/**
 * Implements hook_entity_load().
 */
function workspace_entity_load(array &$entities, $entity_type_id) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  if ($workspace_manager->entityTypeCanBelongToWorkspaces(\Drupal::entityTypeManager()->getDefinition($entity_type_id))) {
    $active_workspace = $workspace_manager->getActiveWorkspace();
    $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
    if ($active_workspace != $default_workspace_id) {
      $keys = array_keys($entities);
      $results = \Drupal::entityTypeManager()
        ->getStorage('content_workspace')
        ->getQuery()
        ->condition('content_entity_type_id', $entity_type_id)
        ->condition('content_entity_id', $keys, 'IN')
        ->condition('workspace', $active_workspace)
        ->execute();
      foreach ($results as $revision_id => $entity_id) {
        $content_workspace = \Drupal::entityTypeManager()
          ->getStorage('content_workspace')
          ->loadRevision($revision_id);
        $entity = $entities[$content_workspace->get('content_entity_id')->value];
        if ($content_workspace->get('content_entity_revision_id')->value != $entity->getRevisionId()) {
          $new_entity = \Drupal::entityTypeManager()
            ->getStorage($entity_type_id)
            ->loadRevision($content_workspace->get('content_entity_revision_id')->value);
          $entities[$entity->id()] = $new_entity;
        }
        $content_workspace->isPublished() ? $entities[$entity->id()]->setPublished() : $entities[$entity->id()]->setUnpublished();
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function workspace_element_info_alter(array &$types) {
  foreach ($types as &$type) {
    if (!isset($type['#pre_render'])) {
      $type['#pre_render'] = array();
    }
    $type['#pre_render'][] = 'workspace_element_pre_render';
  }
}

/**
 * Element pre-render callback.
 */
function workspace_element_pre_render($element) {
  if (isset($element['#cache'])) {
    if (!isset($element['#cache']['contexts'])) {
      $element['#cache']['contexts'] = [];
    }
    $element['#cache']['contexts'] = Cache::mergeContexts(
      $element['#cache']['contexts'], ['workspace']
    );
  }
  return $element;
}

/**
 * Implements hook_entity_presave().
 */
function workspace_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');

  // Only modify the entity if the active workspace isn't the default, and
  // and the entity can belong to a workspace.
  if (!empty($workspace_manager->getActiveWorkspace())
    && \Drupal::getContainer()->getParameter('workspace.default') != $workspace_manager->getActiveWorkspace()
    && $workspace_manager->entityCanBelongToWorkspaces($entity)) {

    // We always want to create a new revision.
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity->setNewRevision(TRUE);

    // As this is the non-default workspace only new entity revisions should be
    // made default.
    $entity->isNew() ? $entity->isDefaultRevision(TRUE) : $entity->isDefaultRevision(FALSE);

    // The publishing status can be stored in a property for safe keeping, then
    // then all entities in the non-default workspace get unpublished.
    $entity->initial_published = $entity->isPublished();
    $entity->setUnpublished();
  }
}

/**
 * Implements hook_entity_insert().
 */
function workspace_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $workspace_manager->updateOrCreateFromEntity($entity);
  if ($workspace_manager->entityCanBelongToWorkspaces($entity)) {
    \Drupal::service('workspace.index.sequence')
      ->useWorkspace($workspace_manager->getActiveWorkspace())
      ->add($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function workspace_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var \Drupal\workspace\WorkspaceManagerInterface $workspace_manager */
  $workspace_manager = \Drupal::service('workspace.manager');
  $workspace_manager->updateOrCreateFromEntity($entity);
  if ($workspace_manager->entityCanBelongToWorkspaces($entity)) {
    \Drupal::service('workspace.index.sequence')
      ->useWorkspace($workspace_manager->getActiveWorkspace())
      ->add($entity);
  }
}

/**
 * Default value callback for 'upstream' base field definition.
 *
 * @return array
 */
function workspace_active_id() {
  return \Drupal::service('workspace.manager')->getActiveWorkspace();
}

/**
 * Implements hook_toolbar().
 */
function workspace_toolbar() {
  return \Drupal::service('workspace.toolbar')->toolbar();
}

/**
 * Implements hook_entity_access().
 */
function workspace_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('workspace.entity_access')->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_create_access().
 */
function workspace_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('workspace.entity_access')->entityCreateAccess($account, $context, $entity_bundle);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function workspace_workspace_access(EntityInterface $entity, $operation, AccountInterface $account) {
  return \Drupal::service('workspace.entity_access')->workspaceAccess($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function workspace_workspace_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return \Drupal::service('workspace.entity_access')->workspaceCreateAccess($account, $context, $entity_bundle);
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function workspace_theme($existing, $type, $theme, $path) {
  return [
    'workspace_add_list' => [
      'variables' => ['content' => NULL],
    ],
    'workspace_rev' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK
 */
function workspace_preprocess_workspace_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = Url::fromRoute('entity.workspace.add_form', array('workspace_type' => $type->id()), $options);
    }
  }
}

/**
 * Prepares variables for revision templates.
 */
function workspace_preprocess_workspace_rev(&$variables) {
  $uuid = $variables['elements']['#uuid'];
  $rev = $variables['elements']['#rev'];
  $rev_info = array_merge(
    \Drupal::service('workspace.entity_index.rev')->get("$uuid:$rev"),
    $variables['elements']['#rev_info']
  );

  $variables = array_merge($variables, $rev_info);

  list($i) = explode('-', $rev);
  // Apart from the index length, we want 7 characters plus dash and ellipsis.
  $length = strlen($i) + 9;
  $title = Unicode::truncate($rev, $length, FALSE, TRUE);

  if (!empty($rev_info['revision_id'])) {
    $entity_revision = \Drupal::entityTypeManager()->getStorage($rev_info['entity_type_id'])->loadRevision($rev_info['revision_id']);
    $variables['title'] = Link::fromTextAndUrl($title, $entity_revision->toUrl('revision'));
  }
  else {
    $variables['title'] = $title;
  }
}
