<?php

/**
 * @file
 * Install, update and uninstall functions for the workspace module.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\multiversion\Entity\Workspace;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\workspace\Entity\Replication;

/**
 * Implementation of hook_install().
 */
function workspace_install() {
  // Set workspace earlier to alter entities before anyone else does.
  module_set_weight('workspace', 10);

  // Populate the replication blocker key state variable.
  $replication_blocker_key = Crypt::randomBytesBase64(55);
  \Drupal::state()->set('workspace.replication_blocker_key', $replication_blocker_key);

  // Add pointers for all existing workspaces.
  foreach (Workspace::loadMultiple() as $workspace) {
    \Drupal::service('workspace.entity_operations')->workspaceInsert($workspace);
  }

  $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
  /** @var \Drupal\multiversion\Entity\WorkspaceInterface $stage */
  $stage = Workspace::create(['machine_name' => 'stage', 'label' => 'Stage', 'type' => 'basic']);
  $stage->set('upstream', $default_workspace_id);
  $stage->save();

  // Allow workspace entity route alterations.
  \Drupal::service('entity_type.manager')->clearCachedDefinitions();
  \Drupal::service('router.builder')->rebuild();
}

/**
 * Allow "administer deployment" roles access to the Toolbar Update button.
 */
function workspace_update_8101() {
  if (\Drupal::moduleHandler()->moduleExists('deploy')) {
    $roles = \Drupal::entityTypeManager()
      ->getStorage('user_role')
      ->loadMultiple();
    foreach ($roles as $role) {
      if ($role->hasPermission('administer deployments')) {
        $role->grantPermission('update any workspace from upstream');
        $role->save();
      }
    }
  }
}

/**
 * Make sure all workspaces have a pointer.
 */
function workspace_update_8102() {
  $workspaces = \Drupal::entityTypeManager()->getStorage('workspace')->loadMultiple();
  $storage = \Drupal::entityTypeManager()->getStorage('workspace_pointer');
  foreach ($workspaces as $workspace) {
    $workspace_pointers = $storage->loadByProperties(['workspace_pointer' => $workspace->id()]);
    if (empty($workspace_pointers)) {
      /** @var \Drupal\workspace\WorkspacePointerInterface $pointer */
      $pointer = $storage->create();
      $pointer->setWorkspace($workspace);
      $pointer->save();
    }
  }
}

/**
 * Add the replication_status.
 */
function workspace_update_8103() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  // Add the replication status field to the replication entity type.
  $replication_status = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Replication status'))
    ->setDescription(new TranslatableMarkup('The status of the replication.'))
    ->setRequired(TRUE)
    ->setDefaultValue(Replication::FAILED)
    ->setInitialValue(Replication::FAILED);
  $definition_update_manager->installFieldStorageDefinition('replication_status', 'replication', 'workspace', $replication_status);

  // Set the replication_status.
  $entity_type = $definition_update_manager->getEntityType('replication');
  \Drupal::database()->update($entity_type->getBaseTable())
    ->fields(['replication_status' => Replication::REPLICATED])
    ->isNotNull('replicated')
    ->execute();
}

/**
 * Populate the replication blocker key state variable.
 */
function workspace_update_8104() {
  $state = \Drupal::state();
  $replication_blocker_key = $state->get('workspace.replication_blocker_key');
  if (!$replication_blocker_key) {
    $replication_blocker_key = Crypt::randomBytesBase64(55);
    $state->set('workspace.replication_blocker_key', $replication_blocker_key);
  }
}

/**
 * Update workspace pointer name field.
 */
function workspace_update_8105() {
  // This update hook wasn't working, so it's been removed in favour of 8106.
}

/**
 * Updates definitions of entity's type columns.
 *
 * @param string $entity_type_id
 *   The type of entity.
 * @param string[] $columns
 *   The list of column names.
 * @param string[] $tables
 *   The list of tables to update the columns in.
 *
 * @throws \Exception
 */
function workspace_update_field_storage_definitions($entity_type_id, array $columns, array $tables) {
  $database = \Drupal::database();
  /* @var \Drupal\Core\Field\BaseFieldDefinition[] $base_field_definitions */
  $base_field_definitions = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($entity_type_id);
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $existing_data = [];

  foreach ($tables as $table) {
    // Store existing data in memory.
    $data = $database
      ->select($table)
      ->fields($table)
      ->execute()
      ->fetchAll(\PDO::FETCH_ASSOC);

    // Truncate the table to unfreeze modification of its schema only in
    // case it's not empty.
    if (!empty($data)) {
      $database
        ->truncate($table)
        ->execute();

      $existing_data[$table] = $data;
    }
  }

  foreach ($columns as $column) {
    $definition_update_manager->updateFieldStorageDefinition($base_field_definitions[$column]);
  }

  // Put the data back into the table.
  foreach ($existing_data as $table => $entries) {
    foreach ($entries as $entry) {
      $database
        ->insert($table)
        ->fields($entry)
        ->execute();
    }
  }
}

/**
 * Updates definitions of single choice field to multiple choice.
 *
 * @param string $entity_type_id
 *   The type of entity.
 * @param string[] $columns
 *   The list of column names.
 *
 * @throws \Exception
 */
function workspace_update_field_to_multiple($entity_type_id, array $columns) {
  $database = \Drupal::database();

  foreach ($columns as $column) {
    // Retrieve existing field data.
    $fieldData = $database->select($entity_type_id, 'ws')
      ->fields('ws', ['id', $column])
      ->condition($column, '', '!=')
      ->execute()
      ->fetchAllKeyed();


    // Remove data from the storage.
    $database->update($entity_type_id)
      ->fields([$column => NULL])
      ->execute();

    $manager = \Drupal::entityDefinitionUpdateManager();
    $storage_definition = $manager->getFieldStorageDefinition($column, $entity_type_id);
    $storage_definition->setCardinality(-1);
    $manager->updateFieldStorageDefinition($storage_definition);

    // Restore entity data in the new schema.
    $insert_query = $database->insert('workspace__' . $column)
      ->fields(['bundle',
        'deleted',
        'entity_id',
        'revision_id',
        'langcode',
        'delta',
        $column . '_target_id'
      ]);
    foreach ($fieldData as $id => $fieldValue) {
      $insert_query->values(['workspace', 0, $id, $id, 'en', 0, $fieldValue]);
    }
    $insert_query->execute();
  }

}



/**
 * Update workspace pointer name field again.
 */
function workspace_update_8106() {
  workspace_update_field_storage_definitions('workspace_pointer', ['name'], ['workspace_pointer', 'workspace_pointer_revision']);
}

/**
 * Make sure replication_status is a integer field type.
 */
function workspace_update_8107() {
  workspace_update_field_storage_definitions('replication', ['replication_status', 'name'], ['replication']);
}

/**
 * Make sure replication settings are multiple choice fields.
 */
function workspace_update_8109() {
  workspace_update_field_to_multiple('workspace', ['pull_replication_settings', 'push_replication_settings']);
}
